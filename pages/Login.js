import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { RecaptchaVerifier, signInWithPhoneNumber,onAuthStateChanged } from "firebase/auth"
import { authentication } from '../firebase/clientApp.ts'
import React, { useState } from 'react';
import { getDatabase, ref, set, get } from "firebase/database";
import { Router, useRouter } from 'next/router'

export default function Login() {
  const [phoneNumber, setPhoneNumber] = useState("")
  const [phoneInputShown, setPhoneInputShown] = useState(true)
  const [codeInputShown, setCodeInputShown] = useState(false)
  const [otp, setOTP] = useState("")
  const router = useRouter()

  const generateRecaptcha = () => {
    window.recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {
      'size': 'invisible',
      'callback': (response) => {
        // reCAPTCHA solved, allow signInWithPhoneNumber.
        onSignInSubmit();
      }
    }, authentication);
  }

  // onAuthStateChanged(authentication, (user) => {
  //   if (user) {
  //     // User is signed in, see docs for a list of available properties
  //     // https://firebase.google.com/docs/reference/js/auth.user
  //     const uid = user.uid;
  //     // ...
  //     router.push('/Homepage');
  //   }
  // });
  

  const requestOTP = (e) => {
    console.log("Requesting OTP for phone number: " + phoneNumber)
    generateRecaptcha();
    let appVerifier = window.recaptchaVerifier;
    signInWithPhoneNumber(authentication, phoneNumber, appVerifier)
    .then(confirmationResult => {
      setPhoneInputShown(false)
      setCodeInputShown(true)
      window.confirmationResult = confirmationResult;
    }).catch((error) => {
      // error - sms not sent
      console.log(error)
    });
  }

  const verifyOTP = () => {

    if(otp.length === 6) {
      // verify OTP
      let confirmationResult = window.confirmationResult;

      confirmationResult.confirm(otp).then((result) => {
        // User signed in successfully.
        try {
          const user = result.user;
          const userExists = user ? true : false;
    
          checkUserExistence(userExists);
        } catch (error) {
          // Handle any errors that occur during the verification process
          console.error(error);
        }
        // ...
      }).catch((error) => {
        // User couldn't sign in (bad verification code?)
        // ...
      });

    }
  }

  // NOTE: FOR LATER USE
  const checkUserExistence = (userExists) => {
    // Assuming you have a "users" collection in your Firebase Realtime Database
    const database = getDatabase();
    const usersRef = ref(database, 'users');

    get(usersRef).then((snapshot) => {
      if (snapshot.exists()) {
        const userData = snapshot.val();
        const phoneNumberExists = Object.values(userData).some(user => user.phoneNumber === phoneNumber);

        if (phoneNumberExists) {
          // User exists, redirect to the homepage
          router.push('/Homepage');
        } else {
          // User doesn't exist, redirect to the sign-up page
          router.push({
            pathname: '/createNewUser',
            query: { 
              phoneNumber: phoneNumber 
            }
        }, '/createNewUser');
        }
      } else {
        // User doesn't exist, redirect to the sign-up page
        router.push({
          pathname: '/createNewUser',
          query: { 
            phoneNumber: phoneNumber 
          }
      }, '/createNewUser');
      }
    }).catch((error) => {
      console.log(error);
    });
  }

  return (
  
    <div className={styles.container}>
    
    <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com"></link>
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin></link>
        <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet"></link>    
    </Head>
      <main className={styles.main}>

      {phoneInputShown === true ? 
      <>
        <h1 className="text-2xl font-bold font-lato text-center">
            Hey there! 👋🏼  Welcome to UTFSA! 🇵🇭
        </h1>
        <h2 className='text-md font-bold font-lato text-center'>To get started, enter your phone number.</h2>
        <div>
            <div className="mt-1 relative rounded-md shadow-sm pt-3">
                <div className="absolute inset-y-0 left-0 pl-3 pt-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">📞</span>
                </div>
                <input
                type="tel"
                value={phoneNumber}
                className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-11 pr-12 sm:text-sm border-gray-300 rounded-xl transition ease-in-out"
                placeholder="(000) 000 - 0000"
                onChange={e => setPhoneNumber(e.target.value)}
                />
            </div>

            <div className="flex space-x-2 justify-center pt-4">
                <button 
                type="submit" 
                className="inline-block px-6 py-2.5 bg-gray-800 text-white font-medium text-sm leading-tight uppercase rounded-lg shadow-md hover:bg-gray-900 hover:shadow-lg focus:bg-gray-900 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-gray-900 active:shadow-lg transition duration-150 ease-in-out"
                onClick={() => requestOTP()}
                >Submit</button>
            </div>
          </div> 
        </>
        : null
        }

      {codeInputShown === true ? 
      <>
        <h1 className="text-2xl font-bold font-lato text-center">
            We sent you a code!
        </h1>
        <h2 className='text-md font-bold font-lato text-center'>Please enter it below.</h2>
        <div>
            <div className="mt-1 relative rounded-md shadow-sm pt-3">
                <div className="absolute inset-y-0 left-0 pl-3 pt-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">🔑</span>
                </div>
                <input
                type="tel"
                value={otp}
                onChange={e => setOTP(e.target.value)}
                className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-11 pr-12 sm:text-sm border-gray-300 rounded-xl transition ease-in-out"
                />
            </div>

            <div className="flex space-x-2 justify-center pt-4">
                <button 
                type="button" 
                className="inline-block px-6 py-2.5 bg-gray-800 text-white font-medium text-sm leading-tight uppercase rounded-lg shadow-md hover:bg-gray-900 hover:shadow-lg focus:bg-gray-900 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-gray-900 active:shadow-lg transition duration-150 ease-in-out"
                onClick={() => verifyOTP()}
                >Submit</button>
            </div>
          </div> 
        </>
        : null
        }

        <div id='recaptcha-container'></div>

      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )

}
